name: tests

on:
  workflow_dispatch:
  pull_request_target:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  style-check:
    name: "tests"
    if: (github.event_name != 'pull_request' && ! github.event.pull_request.head.repo.fork) || (github.event_name == 'pull_request' && (github.event.pull_request.head.repo.fork || startsWith(github.head_ref, 'dependabot/')))
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # dropped support for windows gcc and intel - it compiles successfully but importing it causes lots of DLL load errors
        # specifically, `libgfortran.DLL` must be in the same directory as the `.pyd`: https://github.com/mesonbuild/meson/issues/11878.
        # this means we need to either:
        # - copy the DLLs into the wheel with [delvewheel](https://github.com/adang1345/delvewheel)
        # - use `os.add_dll_directory()` before library import [like scipy](https://github.com/scipy/scipy/blob/9bc74cd8f4b42016cb85766524df0316d365c97f/tools/openblas_support.py#L228-L264).
        # however, this adds a lot of complexity and we don't support windows anyway
        # NOTE: meson also fails to detect intel classic C compiler (https://github.com/mesonbuild/meson/issues/14089), but will be fixed in release 1.8.
        os: [ubuntu-latest, macos-latest]
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        # NOTE: intel fortran compiler classic `ifort` is deprecated and discontinued in October 2024 on all platforms. In particular, `ifort` does not support arm64: https://community.intel.com/t5/Intel-Fortran-Compiler/Intel-fortran-for-apple-silicon-macs/m-p/1511019#M167530
        # see https://github.com/fortran-lang/setup-fortran
        toolchain:
          - { compiler: gcc, version: 13 }
          - { compiler: intel, version: "2025.0" }
        include:
          - os: ubuntu-22.04
            python-version: "3.7"
            toolchain: { compiler: gcc, version: 13 }
          - os: ubuntu-22.04
            python-version: "3.7"
            toolchain: { compiler: intel, version: "2025.0" }
        exclude:
          # ubuntu 24.04 with architecture 'x64' does not have py37, using ubuntu 22.04 instead (as above)
          - os: ubuntu-latest
            python-version: "3.7"
          # macos 14.7.2 with architecture 'arm64' does not have py37, excluding it.
          - os: macos-latest
            python-version: "3.7"
          # `ifx` compiler not supported on macos arm64, excluding it.
          - os: macos-latest
            toolchain: { compiler: intel, version: "2025.0" }

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        run: |
          uv venv
          uv pip install ".[testing]" --verbose

      # adding `--no-editable` to avoid https://github.com/astral-sh/uv/issues/10214
      - name: Run tests
        run: |
          uv run --no-editable testflo
