name: Build wheels and test

on:
  workflow_dispatch:
  pull_request:
  push:
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build sdist for pyspline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.build.os }} with ${{ matrix.toolchain.compiler }} (${{ matrix.python }}-${{ matrix.build.platform }}_${{ matrix.build.arch }})
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        python: ["cp37", "cp38", "cp39", "cp310", "cp311", "cp312", "cp313"]
        build:
          - { os: "ubuntu-22.04", platform: "manylinux", arch: "x86_64" }
          - { os: "ubuntu-22.04-arm", platform: "manylinux", arch: "aarch64" }
          - { os: "macos-13", platform: "macosx", arch: "x86_64" }
          - { os: "macos-14", platform: "macosx", arch: "arm64" }
          # no support for windows gcc and intel - it compiles successfully but importing it causes lots of DLL load errors
          # specifically, `libgfortran.DLL` must be in the same directory as the `.pyd`: https://github.com/mesonbuild/meson/issues/11878.
          # this means we need to either:
          # - copy the DLLs into the wheel with [delvewheel](https://github.com/adang1345/delvewheel)
          # - use `os.add_dll_directory()` before library import [like scipy](https://github.com/scipy/scipy/blob/9bc74cd8f4b42016cb85766524df0316d365c97f/tools/openblas_support.py#L228-L264).
          # however, this adds a lot of complexity and we don't support windows anyway
          # NOTE: meson also fails to detect intel classic C compiler (https://github.com/mesonbuild/meson/issues/14089), but will be fixed in release 1.8.
        toolchain:
          # see https://github.com/fortran-lang/setup-fortran
          - { compiler: gcc, version: 13 }
          - { compiler: intel, version: "2025.0" }
          # NOTE: intel fortran compiler classic `ifort` is deprecated and discontinued in October 2024 on all platforms
        exclude:
          # macos 14.7.2 with architecture 'arm64' does not have py37, excluding it.
          - python: "cp37"
            build:
              platform: "macosx"
          # `ifx` compiler not supported on macos arm64, excluding it.
          # also, `ifort` (2021.10, last version) does not support arm64: https://community.intel.com/t5/Intel-Fortran-Compiler/Intel-fortran-for-apple-silicon-macs/m-p/1511019#M167530
          - build:
              - os: macos-14
            toolchain: { compiler: intel, version: "2025.0" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup gfortran 13
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: gcc
          version: 13

      # build frontend
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      # for cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.build.platform }}_${{ matrix.build.arch }}
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"

      - uses: actions/upload-artifact@v4
        if: matrix.toolchain.compiler == 'gcc' # do not upload wheels created by intel binaries
        with:
          path: ./wheelhouse/*.whl
          name: wheels-${{ strategy.job-index }}

  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mdolab-pyspline
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
